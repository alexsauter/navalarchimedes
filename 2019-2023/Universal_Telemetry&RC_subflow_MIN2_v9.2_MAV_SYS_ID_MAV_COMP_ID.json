[{"id":"531f48d7.825248","type":"subflow","name":"Telemetry and RC (min)","info":"# Connect via USB-Telemetry Radio to Pixhawk 4 with Telemetry Radio\n\nMAVlink telemetry information is received automatically\n\nAdditional control messages (RC) can be transmitted via message input\n\n**Requires:**\nnpm install mavlink\nnpm install serialport\nnpm install process\n\n**Add to functionGlobalContext (in settings.js):**\n**Windows:**\nmavlink:require('C:\\\\Users\\\\<user>\\\\node_modules\\\\mavlink\\\\src\\\\mavlink.js'),\nSerialPort:require('C:\\\\Users\\\\<user>\\\\node_modules\\\\serialport')\nprocess:require('C:\\\\Users\\\\<user>\\\\node_modules\\\\process')\n**Linux:**\nmavlink:require('/home/pi/node_modules/mavlink/src/mavlink.js'),\nSerialPort:require('/home/pi/node_modules/serialport'),\nprocess:require('/home/pi/node_modules/process')\n\n**Download newest common.xml from:**\nhttps://github.com/mavlink/mavlink.git\n\n(fix mavlink.js to not show warnings for 64bit-types)\n\n\n**Environmental variables:**\nOn Windows: COM3\nOn Linux/Raspberry Pi: /dev/ttyACM0","category":"Pixhawk","in":[{"x":300,"y":700,"wires":[{"id":"ac614a97.f00668"}]}],"out":[{"x":900,"y":40,"wires":[{"id":"21425743.621318","port":0}]},{"x":1160,"y":120,"wires":[{"id":"21425743.621318","port":1}]},{"x":1100,"y":280,"wires":[{"id":"21425743.621318","port":3}]},{"x":1080,"y":520,"wires":[{"id":"a439f078.2f667","port":0}]}],"env":[{"name":"MAV_SYS_ID","type":"num","value":"1"},{"name":"MAV_COMP_ID","type":"num","value":"1"}],"color":"#C0DEED","inputLabels":["Send msg/RC-msg"],"outputLabels":["ATTITUDE","VFR_HUD","GLOBAL_POSITION_INT","CONTROL"],"icon":"node-red/bridge.svg","status":{"x":380,"y":540,"wires":[{"id":"9d71a759.8b2ab8","port":0}]}},{"id":"be6676e4.fdec98","type":"inject","z":"531f48d7.825248","name":"(Re)Start Serial Port of Pixhawk","topic":"","payload":"COM3","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"2","x":190,"y":340,"wires":[["3e65cb13.4922b4"]]},{"id":"3e65cb13.4922b4","type":"function","z":"531f48d7.825248","name":"Node.js mavlink","func":"var SerialPort = global.get(\"SerialPort\");\nvar mavlink = global.get(\"mavlink\");\n\nvar connection = {};\nconnection.devicepath = null;\nconnection.mavReady = false;\nconnection.tout = null;         //timer the restarts connection if (unplanned) closed\nconnection.shutdown = false;\nconnection.lasterror = \"\";\n\nvar debug = true;\n\nvar settings = {};\nsettings.serialReconnectTime = 3000;\n\n//------------------------------------------\n//      FUNCTIONS\n//------------------------------------------\n\nfunction findPathToManufacturer(founddevices, manufacturer, manufacturerTELE) {\n    var devices = founddevices;\n    //console.log(JSON.stringify(devices));\n    for (var i=0; i<devices.length; i++) {\n        //console.log(ports[i].manufacturer);\n        if (devices[i].manufacturer == manufacturer) {\n            //console.log(devices[i].path);\n            return devices[i].path;\n        } else if (devices[i].manufacturer == manufacturerTELE) {\n            //console.log(devices[i].path);\n            return devices[i].path;\n        }\n    }\n    return null;\n}\n\nconnection.writemessage = function(message) {\n    connection.port.write(message.buffer);\n    //node.warn(message.buffer);\n};\n\nfunction tryToOpenPort(founddevicepath) {\n    if (!connection.shutdown) {\n        if (founddevicepath !== null) {\n            node.status({fill:\"green\",shape:\"ring\",text:'Pixhawk/telemetry-device found at port '+founddevicepath});\n            try {\n                //Open serial port\n                connection.port = new SerialPort(founddevicepath, {\n                    //baudRate: 921600\n                    baudRate: 57600\n                    //baudRate: 115200 \n                }, function(err, results) {\n                    if (err) {\n                        node.status({fill:\"red\",shape:\"dot\",text:'Serial Port could not be created'});\n                        let currerror = err.toString();\n                        if (currerror != connection.lasterror) {\n                            connection.lasterror = err.toString();\n                            console.log(connection.lasterror);\n                        }\n                        if (connection.tout !== null) { clearTimeout(connection.tout); }\n                        connection.tout = setTimeout(tryToOpenPort(null), settings.serialReconnectTime);\n                    }\n                });\n                node.status({fill:\"green\",shape:\"dot\",text:'Serial Port is ready'});\n                \n                connection.port.on('open', function() {\n                    console.log(\"Pixhawk/telemetry-device connected!\");\n            \t    node.status({fill:\"green\",shape:\"dot\",text:'Serial Port is open'});\n            \t    if (connection.tout !== null) { clearTimeout(connection.tout); }\n            \t    if (debug) {\n            \t        flow.set(\"test\",[connection]);\n            \t    }\n            \t\tsetTimeout(node.status({fill:\"green\",shape:\"dot\",text:'connected'}), 2000);\n                });\n    \n                //Error handling\n                connection.port.on('error', function () {\n                    if (connection.port.isOpen) {\n                        node.status({fill:\"yellow\",shape:\"ring\",text:\"An error occured...\"});\n                        connection.port.close(function (err) {\n                            node.log('Pixhawk/telemetry-port closed with error');\n                            node.log(err);\n                        //console.log('port closed', err);\n                        });\n                    } \n                    if (connection.tout !== null) { clearTimeout(connection.tout); }\n            \t\tconnection.tout = setTimeout(tryToOpenPort(null), settings.serialReconnectTime);\n                });\n        \n                connection.port.on('close', function () {\n                    node.status({fill:\"red\",shape:\"ring\",text:'Pixhawk/telemetry-port closed, trying to reconnect...'});\n                    connection.devicepath = null;\n                    if (connection.tout !== null) { clearTimeout(connection.tout); }\n                    if (!connection.shutdown) {\n            \t\t    connection.tout = setTimeout(tryToOpenPort(null), settings.serialReconnectTime);\n                    }\n                    //port = undefined;\n                });\n    \n        \t\t//Parse any new incoming data\n        \t\tconnection.port.on('data', function(data) {\n        \t\t    if (connection.mavReady) {\n            \t\t    //Sending message\n            \t\t    try {\n                \t\t\t//Check for new message to send\n                \t\t\tvar newmessage = flow.get(\"newmessage\")||0;\n                \t\t    if (newmessage !== 0) {\n                 \t\t        connection.m.createMessage(newmessage.type, newmessage.fields, connection.writemessage);\n                \t\t    }\n                \t\t\tflow.set(\"newmessage\",0);\n            \t\t    }\n            \t\t    catch (err) {\n                            node.status({fill:\"red\",shape:\"ring\",text:err.message});\n                        }\n                        \n                        //Receiving message\n                        try {\n                \t\t\tconnection.m.parse(data);\n                        }\n                        catch (err) {\n                            node.status({fill:\"red\",shape:\"ring\",text:err.message});\n                        }\n        \t\t    }\n            \t});\n             }\n            catch (err) {\n                node.status({fill:\"red\",shape:\"dot\",text:'Something went wrong. Trying again...'});\n                let currerror = err.toString();\n                if (currerror != connection.lasterror) {\n                    connection.lasterror = err.toString();\n                    console.log(connection.lasterror);\n                }\n                if (connection.tout !== null) { clearTimeout(connection.tout); }\n                connection.tout = setTimeout(tryToOpenPort(null), settings.serialReconnectTime);\n            }\n        } else {\n            node.status({fill:\"red\",shape:\"ring\",text:'No Pixhawk/telemetry-device found yet'});\n            SerialPort.list()\n                .then((founddevices) => {\n                    //Choose right serial device\n                    connection.devicepath = findPathToManufacturer(founddevices, \"3D Robotics\", \"FTDI\");\n                    if (connection.tout !== null) { clearTimeout(connection.tout); }\n                    connection.tout = setTimeout(tryToOpenPort(connection.devicepath), settings.serialReconnectTime);\n                })\n                .catch((err) => {\n                    connection.devicepath = null;\n                    console.log(\"An error occured when trying to get device-list:\");\n                    let currerror = err.toString();\n                    if (currerror != connection.lasterror) {\n                        connection.lasterror = err.toString();\n                        console.log(connection.lasterror);\n                    }\n                    if (connection.tout !== null) { clearTimeout(connection.tout); }\n                    connection.tout = setTimeout(tryToOpenPort(null), settings.serialReconnectTime);\n                });\n        }\n    }\n}\n\n//------------------------------------------\n//      Startup\n//------------------------------------------\n\nnode.status({fill:\"yellow\",shape:\"ring\",text:\"Search for serial devices and starting MAVlink...\"});\n\n//------------Get MAVlink ready------------\n\nvar MAV_SYS_ID = env.get(\"MAV_SYS_ID\")||1;\nvar MAV_COMP_ID = env.get(\"MAV_COMP_ID\")||1;\n\n//listening for system 1 component 1\nconnection.m = new mavlink(MAV_SYS_ID,MAV_COMP_ID);\n\n//When mavlink is ready, assign some listeners\nconnection.m.on('ready', function() {\n    console.log(\"Mavlink is ready!\");\n    node.status({fill:\"green\",shape:\"ring\",text:'Mavlink is ready'});\n    connection.mavReady = true;\n\n\t\t//Attitude listener\n\t\tconnection.m.on('ATTITUDE', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'ATTITUDE';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n \n\t\t//GLOBAL_POSITION_INT listener\n\t\tconnection.m.on('GLOBAL_POSITION_INT', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'GLOBAL_POSITION_INT';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n\n\t\t//HEARTBEAT listener\n\t\tconnection.m.on('HEARTBEAT', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'HEARTBEAT';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n\t\t\n\t\t//VFR_HUD listener\n\t\tconnection.m.on('VFR_HUD', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'VFR_HUD';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n\t\t\n\t\t//ALTITUDE listener\n\t\tconnection.m.on('ALTITUDE', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'ALTITUDE';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n\t\t\n\t\t//VIBRATION listener\n\t\tconnection.m.on('VIBRATION', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'VIBRATION';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n\t\t\n\t\t//NAMED_VALUE_FLOAT listener\n\t\tconnection.m.on('NAMED_VALUE_FLOAT', function(message, fields) {\n\t\t\t//Do something interesting with Attitude data here\n\t\t\tmsg = {};\n\t\t\tmsg.payload = fields;\n\t\t\tmsg.topic = 'NAMED_VALUE_FLOAT';\n\t\t\tnode.send(msg);\n\t\t\t//console.log(\"Roll is \" + fields.roll + \"\\nPitch is \" + fields.pitch);\n\t\t});\n});\n\n//------------Get correct Serial-port-------\n\n//Find serial devices and (repeatedly) try to open port\nif (connection.tout !== null) { clearTimeout(connection.tout); }\nconnection.tout = setTimeout(tryToOpenPort(null), settings.serialReconnectTime);\n\nnode.on('close',function() {\n    console.log(\"Pixhawk/telemetry-port closing...\");\n    connection.shutdown = true;\n        try {\n            connection.port.close(function(err) {\n                if (err !== null) {\n                    node.log('Pixhawk/telemetry-port closed with error');\n                    node.log(err);\n                    //console.log('port closed', err);\n                } else {\n                    node.status({fill:\"red\",shape:\"ring\",text:'Pixhawk/telemetry-port closed'});\n                }\n            });\n        }\n        catch (err) {\n                if (err !== null) {\n                    node.log('Pixhawk/telemetry-port closed with error');\n                    node.log(err);\n                    //console.log('port closed', err);\n                } else {\n                    node.status({fill:\"red\",shape:\"ring\",text:'Pixhawk/telemetry-port closed'});\n                }\n         }\n        if (connection.tout !== null) { clearTimeout(connection.tout); }\n})\n\n","outputs":1,"noerr":0,"x":440,"y":340,"wires":[["21425743.621318"]]},{"id":"21425743.621318","type":"switch","z":"531f48d7.825248","name":"Sort after msg-type","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"ATTITUDE","vt":"str"},{"t":"eq","v":"VFR_HUD","vt":"str"},{"t":"eq","v":"ALTITUDE","vt":"str"},{"t":"eq","v":"GLOBAL_POSITION_INT","vt":"str"},{"t":"eq","v":"HEARTBEAT","vt":"str"},{"t":"eq","v":"VIBRATION","vt":"str"},{"t":"eq","v":"NAMED_VALUE_FLOAT","vt":"str"}],"checkall":"true","repair":false,"outputs":7,"x":650,"y":340,"wires":[["2dc47cd7.3e59b4"],["82ba853b.b77358"],["5ce40776.e36098"],["c3714fb4.b8bfd"],["ad1d061e.1dee68"],["bc371754.5860a8"],["f3e213b.faa68f","a439f078.2f667"]],"outputLabels":["ATTITUDE","VFR_HUD","ALTITUDE","GLOBAL_POSITION_INT","HEARTBEAT","VIBRATION","NAMED_VALUE_FLOAT"]},{"id":"82ba853b.b77358","type":"debug","z":"531f48d7.825248","name":"VFR_HUD","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1290,"y":100,"wires":[]},{"id":"ad1d061e.1dee68","type":"debug","z":"531f48d7.825248","name":"HEARTBEAT","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1170,"y":400,"wires":[]},{"id":"5ce40776.e36098","type":"debug","z":"531f48d7.825248","name":"ALTITUDE","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1250,"y":200,"wires":[]},{"id":"bc371754.5860a8","type":"debug","z":"531f48d7.825248","name":"VIBRATION","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1170,"y":440,"wires":[]},{"id":"c3714fb4.b8bfd","type":"debug","z":"531f48d7.825248","name":"GLOBAL_POSITION_INT","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1250,"y":300,"wires":[]},{"id":"ac614a97.f00668","type":"function","z":"531f48d7.825248","name":"NAMED_VALUE_FLOAT message","func":"if (typeof msg.topic == \"string\" && typeof msg.payload == \"number\") {\n    newmessage = {};\n    newmessage.type = \"NAMED_VALUE_FLOAT\";\n    newmessage.fields = {\n    \t\t\t'time_boot_ms':\tDate.now()%1E9,\n    \t\t\t'name':\t        msg.topic,\n    \t\t\t'value':\t    msg.payload\n    \t\t\t};\n    flow.set(\"newmessage\",newmessage);\n} else {\n    node.status({fill:\"yellow\",shape:\"ring\",text:'Message rejected, wrong format'});\n}","outputs":1,"noerr":0,"x":520,"y":780,"wires":[[]]},{"id":"3edbd0a4.58e87","type":"inject","z":"531f48d7.825248","name":"Prepare message for Pixhawk","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":200,"y":780,"wires":[["ac614a97.f00668"]]},{"id":"f3e213b.faa68f","type":"debug","z":"531f48d7.825248","name":"NAMED_VALUE_FLOAT","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":990,"y":580,"wires":[]},{"id":"9d71a759.8b2ab8","type":"status","z":"531f48d7.825248","name":"","scope":["3e65cb13.4922b4","ac614a97.f00668"],"x":240,"y":540,"wires":[[]]},{"id":"2dc47cd7.3e59b4","type":"debug","z":"531f48d7.825248","name":"ATTITUDE","active":false,"tosidebar":false,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1030,"y":40,"wires":[]},{"id":"a439f078.2f667","type":"function","z":"531f48d7.825248","name":"Reformat","func":"msg.topic = msg.payload.name.substr(0,msg.payload.name.length-1);\nmsg.payload = msg.payload.value;\n//https://stackoverflow.com/questions/22809401/removing-a-null-character-from-a-string-in-javascript/34897151\n//msg.topic.replace(/\\0.*$/g,'');\nreturn msg;","outputs":1,"noerr":0,"x":940,"y":520,"wires":[[]]},{"id":"e964489d.9d2038","type":"catch","z":"531f48d7.825248","name":"","scope":null,"uncaught":false,"x":240,"y":480,"wires":[["5805e263.e334bc"]]},{"id":"5805e263.e334bc","type":"debug","z":"531f48d7.825248","name":"","active":true,"tosidebar":false,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":450,"y":480,"wires":[]},{"id":"69621e36.f7fe","type":"subflow:531f48d7.825248","z":"89f73d52.8a572","name":"Telemetry and RC","env":[{"name":"port","value":"/dev/ttyACM2","type":"str"}],"x":430,"y":360,"wires":[["b814590f.ce8f08"],["2c6167e0.80ba18"],["3faccd72.f14b72"],["7bda28.6c76e5d8","307a50c4.ffb53"]]},{"id":"aad595db.68bb28","type":"inject","z":"89f73d52.8a572","name":"","topic":"test","payload":"32.545","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":220,"y":360,"wires":[["69621e36.f7fe"]]},{"id":"2c6167e0.80ba18","type":"debug","z":"89f73d52.8a572","name":"VFR_HUD","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":850,"y":280,"wires":[]},{"id":"3faccd72.f14b72","type":"debug","z":"89f73d52.8a572","name":"GLOBAL_POSITION_INT","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":890,"y":340,"wires":[]},{"id":"7bda28.6c76e5d8","type":"debug","z":"89f73d52.8a572","name":"Radio Control","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":860,"y":440,"wires":[]},{"id":"b814590f.ce8f08","type":"debug","z":"89f73d52.8a572","name":"ATTITUDE","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":850,"y":220,"wires":[]}]